/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request, Response } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { UserService } from "../user.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { UserCreateInput } from "./UserCreateInput";
import { UserWhereInput } from "./UserWhereInput";
import { UserWhereUniqueInput } from "./UserWhereUniqueInput";
import { UserFindManyArgs } from "./UserFindManyArgs";
import { UserUpdateInput } from "./UserUpdateInput";
import { User } from "./User";
import {
  FileFieldsInterceptor,
  FileInterceptor,
} from "@nestjs/platform-express";
import { diskStorage } from "multer";
import * as path from "path";
import { findSync } from "@prisma/client/runtime";
import * as fs from "fs";
import { join } from "path";
import { InputJsonValue } from "src/types";
import {
  // FilesType,
  fileToJSON,
  // fileToJSON,
  generateMulterOptions,
  generateUploadFields,
} from "src/util/FileHelper";
import { UserFilesType, userFiles } from "./UserFileArgs";
import { UserWhereDownloadInput } from "./UserWhereDownloadInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class UserControllerBase {
  constructor(
    protected readonly service: UserService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(
    AclValidateRequestInterceptor,
    // CustomFileInterceptor,
    FileFieldsInterceptor(
      generateUploadFields(userFiles),
      generateMulterOptions("user")
    )

    // FileInterceptor("fileUserImage", {

    // }),
    // FileInterceptor("fileUserInvoice", {
    //   storage: diskStorage({
    //     destination: "public/user",
    //     filename: async (req, file, cb) => {
    //       // TODO: problem if the user uploads a file with different extension

    //       const prefix = "fileUserInvoice";
    //       const extension = path.extname(file.originalname);
    //       const timestamp = new Date()
    //         .toISOString()
    //         .replace(/[-:]/g, "")
    //         .replace(/\.\d+/, ""); // Format the timestamp
    //       const generateRandomString = (length: number): string => {
    //         let result = "";
    //         const characters =
    //           "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    //         const charactersLength = characters.length;
    //         for (let i = 0; i < length; i++) {
    //           result += characters.charAt(
    //             Math.floor(Math.random() * charactersLength)
    //           );
    //         }
    //         return result;
    //       };
    //       const randomString = generateRandomString(8); // Generate an 8-character random string

    //       const fileName = `${prefix}_${timestamp}_${randomString}${extension}`;
    //       console.log(fileName);
    //       const directory = "public/user";

    //       cb(null, fileName);
    //     },
    //   }),
    // })
  )
  @swagger.ApiConsumes("multipart/form-data")
  @common.Post()
  @swagger.ApiCreatedResponse({ type: User })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async create(
    @common.Body() data: UserCreateInput,
    @common.UploadedFiles()
    files: {
      [key in UserFilesType]?: Express.Multer.File[];
    }
  ) {
    common.Logger.debug(data.toString());
    console.log("fking", data, typeof files);

    // create a type with the UserCreateInput inherting and changing the fileUserImage to InputJson field
    // type UserCreateInputWithFile = Omit<UserCreateInput, "fileUserImage"> & { fileUserImage: InputJsonValue };
    // const newData = {
    //   ...data,
    //   fileUserImage:
    //     file !== undefined
    //       ? {
    //           filePath: file.path,
    //           fileExtension: path.extname(file.originalname),
    //           fileName: file.filename,
    //         }
    //       : { fileExtension: null, filePath: null, fileName: null },
    // };

    fileToJSON<UserCreateInput>(data, userFiles, files);

    console.log({ file: typeof files });

    // if (files?.fileUserImage?.[0]) {
    //   const { path: filePath, originalname, filename } = files.fileUserImage[0];
    //   data.fileUserImage = {
    //     filePath,
    //     fileExtension: path.extname(originalname),
    //     fileName: filename,
    //   };
    // } else {
    //   data.fileUserImage = {
    //     fileExtension: null,
    //     filePath: null,
    //     fileName: null,
    //   };
    // }
    console.log(data);

    delete data.fileUserInvoice;

    return await this.service.create({
      data: data,
      select: {
        createdAt: true,
        fileUserImage: true,
        firstName: true,
        id: true,
        lastName: true,
        roles: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [User] })
  @ApiNestedQuery(UserFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async findMany(@common.Req() request: Request): Promise<User[]> {
    const args = plainToClass(UserFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        createdAt: true,
        fileUserImage: true,
        firstName: true,
        id: true,
        lastName: true,
        roles: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async findOne(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        createdAt: true,
        fileUserImage: true,
        firstName: true,
        id: true,
        lastName: true,
        roles: true,
        updatedAt: true,
        username: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(
    AclValidateRequestInterceptor,
    FileFieldsInterceptor(
      generateUploadFields(userFiles),
      generateMulterOptions("user")
    )
  )
  @swagger.ApiConsumes("multipart/form-data")
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async update(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() data: UserUpdateInput,
    @common.UploadedFiles()
    files: // Thinking of making an interceptor instead of this?
    {
      fileUserImage?: Express.Multer.File[];
    }
  ): Promise<User | null> {
    try {
      fileToJSON<UserUpdateInput>(data, ["fileUserImage"], files);
      console.log("HFDLKSJLD", data, params);
      return await this.service.update({
        where: params,
        data: data,
        select: {
          createdAt: true,
          fileUserImage: true,
          firstName: true,
          id: true,
          lastName: true,
          roles: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async delete(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          createdAt: true,
          fileUserImage: true,
          firstName: true,
          id: true,
          lastName: true,
          roles: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/download/:fileName")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async download(
    @common.Res() res: Response,
    @common.Param() params: UserWhereDownloadInput
  ): Promise<void | Response<any>> {
    return this.service.downloadFile(params.fileName, res);
  }
}
