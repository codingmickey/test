/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateUserArgs } from "./CreateUserArgs";
import { UpdateUserArgs } from "./UpdateUserArgs";
import { DeleteUserArgs } from "./DeleteUserArgs";
import { UserCountArgs } from "./UserCountArgs";
import { UserFindManyArgs } from "./UserFindManyArgs";
import { UserFindUniqueArgs } from "./UserFindUniqueArgs";
import { User } from "./User";
import { UserService } from "../user.service";
import {
  FileUpload,
  GraphQLUpload,
  Upload,
  graphqlUploadExpress,
} from "graphql-upload";
import { graphqlUpload, graphqlUploadMultiple } from "src/util/FileHelper";
import fs from "fs";
import path from "path";
import { MiddlewareBuilder } from "@nestjs/core";
import { UserFilesType } from "./UserFileArgs";

@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => User)
export class UserResolverBase {
  constructor(
    protected readonly service: UserService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async _usersMeta(
    @graphql.Args() args: UserCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [User])
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async users(@graphql.Args() args: UserFindManyArgs): Promise<User[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "own",
  })
  async user(@graphql.Args() args: UserFindUniqueArgs): Promise<User | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => User)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "create",
    possession: "any",
  })
  async createUser(
    @graphql.Args() args: CreateUserArgs,
    // I tried to refactor these by using the userFiles[] from userFiles.ts
    // But wasn't possible in this case so keeping it as it is
    @graphql.Args({ name: "fileUserImage", type: () => GraphQLUpload })
    fileUserImage: FileUpload,
    @graphql.Args({ name: "fileUserInvoice", type: () => GraphQLUpload })
    fileUserInvoice: FileUpload
  ): Promise<{ id: string }> {
    const { newArgs, fileContent } = await graphqlUploadMultiple<
      UserFilesType,
      CreateUserArgs
    >(args, [
      { file: fileUserImage, entity: "fileUserImage" },
      { file: fileUserInvoice, entity: "fileUserInvoice" },
    ]);

    console.log(args);

    // fs.writeFileSync(
    //   path.join(__dirname, "..", "..", "..", "logs", "error.log"),
    //   // JSON.stringify(response, null, 2),
    //   JSON.stringify({ args, fileContent, fileUserImage }, null, 2)
    // );

    // return { id: "true" };

    return await this.service.create({
      ...newArgs,
      data: newArgs.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => User)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async updateUser(
    @graphql.Args() args: UpdateUserArgs,
    @graphql.Args({ name: "fileUserImage", type: () => GraphQLUpload })
    fileUserImage: FileUpload,
    @graphql.Args({ name: "fileUserInvoice", type: () => GraphQLUpload })
    fileUserInvoice: FileUpload
  ): Promise<User | null> {
    try {
      console.log(fileUserImage, fileUserInvoice);

      const { newArgs, fileContent } = await graphqlUploadMultiple<
        UserFilesType,
        UpdateUserArgs
      >(args, [
        { file: fileUserImage, entity: "fileUserImage" },
        { file: fileUserInvoice, entity: "fileUserInvoice" },
      ]);

      return await this.service.update({
        ...newArgs,
        data: newArgs.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => User)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "delete",
    possession: "any",
  })
  async deleteUser(@graphql.Args() args: DeleteUserArgs): Promise<User | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
