/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { UserService } from "../user.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { UserCreateInput } from "./UserCreateInput";
import { UserWhereInput } from "./UserWhereInput";
import { UserWhereUniqueInput } from "./UserWhereUniqueInput";
import { UserFindManyArgs } from "./UserFindManyArgs";
import { UserUpdateInput } from "./UserUpdateInput";
import { User } from "./User";
import { FileInterceptor } from "@nestjs/platform-express";
import { diskStorage } from "multer";
import * as path from "path";
import { findSync } from "@prisma/client/runtime";
import * as fs from "fs";
import { InputJsonValue } from "src/types";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class UserControllerBase {
  constructor(
    protected readonly service: UserService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(
    AclValidateRequestInterceptor,
    // CustomFileInterceptor,

    FileInterceptor("fileUserImage", {
      storage: diskStorage({
        destination: "public/user",
        filename: async (req, file, cb) => {
          // TODO: problem if the user uploads a file with different extension

          const prefix = "fileUserImage";
          const extension = path.extname(file.originalname);
          const timestamp = new Date()
            .toISOString()
            .replace(/[-:]/g, "")
            .replace(/\.\d+/, ""); // Format the timestamp
          const generateRandomString = (length: number): string => {
            let result = "";
            const characters =
              "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
            const charactersLength = characters.length;
            for (let i = 0; i < length; i++) {
              result += characters.charAt(
                Math.floor(Math.random() * charactersLength)
              );
            }
            return result;
          };
          const randomString = generateRandomString(8); // Generate an 8-character random string

          const fileName = `${prefix}_${timestamp}_${randomString}${extension}`;
          const directory = "public/user";

          // Finding the previously uploaded file and then deleting it if the extension is not matching
          // As multer would just replace the file if it has the same name and extension
          // try {
          //   const files = await fs.promises.readdir(directory);
          //   const prefixedFile = files.find((file) => file.startsWith(prefix));

          //   if (prefixedFile) {
          //     const filePath = `${directory}/${prefixedFile}`;
          //     await fs.promises.unlink(filePath);
          //     console.log(
          //       `File ${prefixedFile} with prefix ${prefix} deleted.`
          //     );
          //   } else {
          //     console.log(`No file found with prefix ${prefix}.`);
          //   }
          // } catch (err) {
          //   console.error("Error:", err);
          // }

          // Finally pass the fileName to save the file
          cb(null, fileName);
        },
      }),
    })
  )
  @swagger.ApiConsumes("multipart/form-data")
  @common.Post()
  @swagger.ApiCreatedResponse({ type: User })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async create(
    @common.Body() data: UserCreateInput,
    @common.UploadedFile() file: Express.Multer.File
  ) {
    common.Logger.debug(data.toString());
    console.log("fking", data, file);

    // create a type with the UserCreateInput inherting and changing the fileUserImage to InputJson field
    // type UserCreateInputWithFile = Omit<UserCreateInput, "fileUserImage"> & { fileUserImage: InputJsonValue };
    // const newData = {
    //   ...data,
    //   fileUserImage:
    //     file !== undefined
    //       ? {
    //           filePath: file.path,
    //           fileExtension: path.extname(file.originalname),
    //           fileName: file.filename,
    //         }
    //       : { fileExtension: null, filePath: null, fileName: null },
    // };
    data.fileUserImage = {
      filePath: file.path,
      fileExtension: path.extname(file.originalname),
      fileName: file.filename,
    };

    return await this.service.create({
      data: data,
      select: {
        createdAt: true,
        fileUserImage: true,
        firstName: true,
        id: true,
        lastName: true,
        roles: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [User] })
  @ApiNestedQuery(UserFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async findMany(@common.Req() request: Request): Promise<User[]> {
    const args = plainToClass(UserFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        createdAt: true,
        fileUserImage: true,
        firstName: true,
        id: true,
        lastName: true,
        roles: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async findOne(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        createdAt: true,
        fileUserImage: true,
        firstName: true,
        id: true,
        lastName: true,
        roles: true,
        updatedAt: true,
        username: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async update(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() data: UserUpdateInput
  ): Promise<User | null> {
    try {
      return await this.service.update({
        where: params,
        data: data,
        select: {
          createdAt: true,
          fileUserImage: true,
          firstName: true,
          id: true,
          lastName: true,
          roles: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async delete(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          createdAt: true,
          fileUserImage: true,
          firstName: true,
          id: true,
          lastName: true,
          roles: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  // @common.UseInterceptors(AclFilterResponseInterceptor)
  // @common.Get("/download/:fileName")
  // @swagger.ApiOkResponse({ type: User })
  // @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  // @nestAccessControl.UseRoles({
  //   resource: "User",
  //   action: "read",
  //   possession: "own",
  // })
  // @swagger.ApiForbiddenResponse({
  //   type: errors.ForbiddenException,
  // })
  // async download(
  //   @common.Param() params: UserWhereUniqueInput
  // ): Promise<User | null> {
  //   const result = await this.service.findOne({
  //     where: params,
  //     select: {
  //       createdAt: true,
  //       fileUserImage: true,
  //       firstName: true,
  //       id: true,
  //       lastName: true,
  //       roles: true,
  //       updatedAt: true,
  //       username: true,
  //     },
  //   });
  //   return
  //   if (result === null) {
  //     throw new errors.NotFoundException(
  //       `No resource was found for ${JSON.stringify(params)}`
  //     );
  //   }
  //   return result;
  // }
}
