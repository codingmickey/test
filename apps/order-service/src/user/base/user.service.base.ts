/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, User } from "@prisma/client";
import { PasswordService } from "../../auth/password.service";
import { transformStringFieldUpdateInput } from "../../prisma.util";
import { join } from "path";
import * as fs from "fs";
import { Response } from "express";
import * as errors from "../../errors";

export class UserServiceBase {
  constructor(
    protected readonly prisma: PrismaService,
    protected readonly passwordService: PasswordService
  ) {}

  async count<T extends Prisma.UserCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserCountArgs>
  ): Promise<number> {
    return this.prisma.user.count(args);
  }

  async findMany<T extends Prisma.UserFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserFindManyArgs>
  ): Promise<User[]> {
    return this.prisma.user.findMany(args);
  }
  async findOne<T extends Prisma.UserFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserFindUniqueArgs>
  ): Promise<User | null> {
    return this.prisma.user.findUnique(args);
  }
  async create<T extends Prisma.UserCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserCreateArgs>
  ): Promise<User> {
    return this.prisma.user.create<T>({
      ...args,

      data: {
        ...args.data,
        password: await this.passwordService.hash(args.data.password),
      },
    });
  }
  async update<T extends Prisma.UserUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserUpdateArgs>
  ): Promise<User> {
    const temp = await this.findOne({ where: { id: args.where.id } });
    console.log("hi");
    if (
      (
        args.data.fileUserImage as {
          fileName: string;
          filePath: string;
          fileExtension: string;
        }
      ).filePath !== null &&
      temp !== null &&
      (
        temp?.fileUserImage as {
          fileName: string;
          filePath: string;
          fileExtension: string;
        }
      ).filePath !== null
    ) {
      const filePath = join(
        __dirname,
        "../../../public/user",
        (
          temp.fileUserImage as {
            fileName: string;
            filePath: string;
            fileExtension: string;
          }
        ).fileName
      );
      fs.unlinkSync(filePath);
    }

    return this.prisma.user.update<T>({
      ...args,

      data: {
        ...args.data,

        password:
          args.data.password &&
          (await transformStringFieldUpdateInput(
            args.data.password,
            (password) => this.passwordService.hash(password)
          )),
      },
    });
  }
  async delete<T extends Prisma.UserDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserDeleteArgs>
  ): Promise<User> {
    return this.prisma.user.delete(args);
  }
  async downloadFile(
    fileName: string,
    res: Response
  ): Promise<Response<any> | void> {
    console.log(process.cwd(), __dirname);

    // If file not found return 404 and {
    //   "statusCode": 0,
    //   "message": "string"
    // }
    // Check if the file if present or not

    const filePath = join(__dirname, "../../../public/user", fileName);

    // If file not found return 404 and {
    //   "statusCode": 0,
    //   "message": "string"
    // }

    // check if the file exists
    // if not return 404
    // else return the file

    console.log("Hello", filePath);

    if (fs.existsSync(filePath) === false) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(fileName)}`
      );
    }

    return res.download(filePath);
  }
}
